function _classPrivateMethodInitSpec(obj, privateSet) { _checkPrivateRedeclaration(obj, privateSet); privateSet.add(obj); }
function _classPrivateFieldInitSpec(obj, privateMap, value) { _checkPrivateRedeclaration(obj, privateMap); privateMap.set(obj, value); }
function _checkPrivateRedeclaration(obj, privateCollection) { if (privateCollection.has(obj)) { throw new TypeError("Cannot initialize the same private elements twice on an object"); } }
function _classPrivateMethodGet(receiver, privateSet, fn) { if (!privateSet.has(receiver)) { throw new TypeError("attempted to get private field on non-instance"); } return fn; }
function _classPrivateFieldSet(receiver, privateMap, value) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set"); _classApplyDescriptorSet(receiver, descriptor, value); return value; }
function _classApplyDescriptorSet(receiver, descriptor, value) { if (descriptor.set) { descriptor.set.call(receiver, value); } else { if (!descriptor.writable) { throw new TypeError("attempted to set read only private field"); } descriptor.value = value; } }
function _classPrivateFieldGet(receiver, privateMap) { var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get"); return _classApplyDescriptorGet(receiver, descriptor); }
function _classExtractFieldDescriptor(receiver, privateMap, action) { if (!privateMap.has(receiver)) { throw new TypeError("attempted to " + action + " private field on non-instance"); } return privateMap.get(receiver); }
function _classApplyDescriptorGet(receiver, descriptor) { if (descriptor.get) { return descriptor.get.call(receiver); } return descriptor.value; }
var _ocrTypeList = /*#__PURE__*/new WeakMap();
var _ocrResult = /*#__PURE__*/new WeakMap();
var _parseIdDriver = /*#__PURE__*/new WeakSet();
var _parsePassport = /*#__PURE__*/new WeakSet();
var _parseAlien = /*#__PURE__*/new WeakSet();
var _parseCredit = /*#__PURE__*/new WeakSet();
class OcrResultParser {
  constructor() {
    _classPrivateMethodInitSpec(this, _parseCredit);
    _classPrivateMethodInitSpec(this, _parseAlien);
    _classPrivateMethodInitSpec(this, _parsePassport);
    _classPrivateMethodInitSpec(this, _parseIdDriver);
    _classPrivateFieldInitSpec(this, _ocrTypeList, {
      writable: true,
      value: ['idcard', 'driver', 'passport', 'foreign-passport', 'alien', 'credit', 'idcard-ssa', 'driver-ssa', 'passport-ssa', 'foreign-passport-ssa', 'alien-ssa', 'credit-ssa']
    });
    _classPrivateFieldInitSpec(this, _ocrResult, {
      writable: true,
      value: null
    });
  }
  parseOcrResult(ocrType, ssaMode, ocrResult, ssaResult, ssaRetryCount) {
    if (!_classPrivateFieldGet(this, _ocrTypeList).includes(ocrType)) throw new Error('ResultParser :: Unsupported OCR type');
    _classPrivateFieldSet(this, _ocrResult, ocrResult);
    var parseResult = {};
    switch (ocrType) {
      case 'idcard':
      case 'driver':
      case 'idcard-ssa':
      case 'driver-ssa':
        parseResult = _classPrivateMethodGet(this, _parseIdDriver, _parseIdDriver2).call(this);
        break;
      case 'passport':
      case 'passport-ssa':
        parseResult = _classPrivateMethodGet(this, _parsePassport, _parsePassport2).call(this);
        break;
      case 'alien':
      case 'alien-ssa':
        parseResult = _classPrivateMethodGet(this, _parseAlien, _parseAlien2).call(this);
        break;
      case 'credit':
      case 'credit-ssa':
        parseResult = _classPrivateMethodGet(this, _parseCredit, _parseCredit2).call(this);
        break;
      default:
        throw new Error('Unsupported OCR type');
    }
    if (ssaMode && !!ssaResult) {
      parseResult.truth = ssaResult;
      parseResult.truthRetryCount = ssaRetryCount;
    }
    return parseResult;
  }
}
function _parseIdDriver2() {
  var target = {};
  var DlcLength = 14;
  var RrcLength = 12;

  // 아래 내용은 그대로 porting
  var resultSplit = _classPrivateFieldGet(this, _ocrResult).split('/');
  var resultIndex = 0;
  if (resultIndex < resultSplit.length) target.Completed = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.type = resultSplit[resultIndex], resultIndex++;
  if (target.type === "1" && resultSplit.length === RrcLength) {
    if (resultIndex < resultSplit.length) target.name = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) target.number = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) target.Date = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) {
      target.region = resultSplit[resultIndex], resultIndex++;
      target.region = target.region.trim();
    }
    if (target.number !== undefined && target.number.length >= 6) target.birth = target.number.slice(0, 6);
    if (target.number !== undefined && target.number.length === 13) target.number = target.number.slice(0, 6) + '-' + target.number.slice(6, 13);else target.number = "";
    if (resultIndex < resultSplit.length) target.overseasResident = resultSplit[resultIndex], resultIndex++;
  } else if (target.type === "2" && resultSplit.length === DlcLength) {
    if (resultIndex < resultSplit.length) target.name = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) target.number = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) target.licenseNumber = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) target.Date = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) {
      target.region = resultSplit[resultIndex], resultIndex++;
      target.region = target.region.trim();
    }
    if (resultIndex < resultSplit.length) target.serial = resultSplit[resultIndex], resultIndex++;
    if (resultIndex < resultSplit.length) target.licenseType = resultSplit[resultIndex], resultIndex++;
    if (target.number !== undefined && target.number.length >= 6) target.birth = target.number.slice(0, 6);
    if (target.number !== undefined && target.number.length === 13) target.number = target.number.slice(0, 6) + '-' + target.number.slice(6, 13);else target.number = "";
  }
  if (resultIndex < resultSplit.length) target.color_point = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.face_score = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.specular = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.start_t = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.end_t = resultSplit[resultIndex], resultIndex++;
  return target;
}
function _parsePassport2() {
  var target = {};

  // 아래 내용은 그대로 porting
  var resultSplit = _classPrivateFieldGet(this, _ocrResult).split('/');
  var resultIndex = 0;
  if (resultIndex < resultSplit.length) target.Completed = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) {
    target.name = resultSplit[resultIndex], resultIndex++;
    target.name = target.name.trim();
  }
  if (resultIndex < resultSplit.length) {
    target.surName = resultSplit[resultIndex], resultIndex++;
    target.surName = target.surName.trim();
  }
  if (resultIndex < resultSplit.length) {
    target.givenName = resultSplit[resultIndex], resultIndex++;
    target.givenName = target.givenName.trim();
  }
  if (resultIndex < resultSplit.length) target.type = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.issuing_country = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.passport_no = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.nationality = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.date_of_issue = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.sex = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.date_of_expiry = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.personal_no = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.number = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.date_of_birth = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.name_kor = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.color_point = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.face_score = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.specular = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.mrz1 = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.mrz2 = resultSplit[resultIndex], resultIndex++;
  if (target.number !== undefined && target.number.length === 13) target.number = target.number.slice(0, 6) + '-' + target.number.slice(6, 13);else target.number = "";
  return target;
}
function _parseAlien2() {
  var target = {};
  var resultSplit = _classPrivateFieldGet(this, _ocrResult).split('/');

  // 아래 내용은 그대로 porting
  var resultIndex = 0;
  if (resultIndex < resultSplit.length) target.Completed = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.name = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.number = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.Date = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.nationality = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.visaType = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.name_kor = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.color_point = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.face_score = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.specular = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.start_t = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.end_t = resultSplit[resultIndex], resultIndex++;
  if (target.number.length >= 6) target.birth = target.number.slice(0, 6);
  if (target.number.length === 13) target.number = target.number.slice(0, 6) + '-' + target.number.slice(6, 13);else target.number = "";
  return target;
}
function _parseCredit2() {
  var target = {};
  var resultSplit = _classPrivateFieldGet(this, _ocrResult).split(',');
  var resultIndex = 0;
  if (resultIndex < resultSplit.length) target.Completed = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.number = resultSplit[resultIndex], resultIndex++;
  if (resultIndex < resultSplit.length) target.exp_date = resultSplit[resultIndex], resultIndex++;
  return target;
}
export default new OcrResultParser();
//# sourceMappingURL=data:application/json;charset=utf8;base64,
